Implementation of a separate stack, intended for JITs, which has only pointers.

diff -r 661e1d4994e8 collector-gembc.c
--- a/collector-gembc.c	Thu Nov 26 23:03:19 2015 -0500
+++ b/collector-gembc.c	Thu Nov 26 23:06:11 2015 -0500
@@ -341,7 +341,9 @@
     struct GGGGC_PoolList pool0Node, *plCur;
     struct GGGGC_Pool *poolCur;
     struct GGGGC_PointerStackList pointerStackNode, *pslCur;
+    struct GGGGC_JITPointerStackList jitPointerStackNode, *jpslCur;
     struct GGGGC_PointerStack *psCur;
+    void **jpsCur;
     struct ToSearch *toSearch;
     unsigned char genCur;
     ggc_size_t i;
@@ -369,6 +371,10 @@
     pointerStackNode.pointerStack = ggggc_pointerStack;
     pointerStackNode.next = ggggc_blockedThreadPointerStacks;
     ggggc_rootPointerStackList = &pointerStackNode;
+    jitPointerStackNode.cur = ggc_jitPointerStack;
+    jitPointerStackNode.top = ggc_jitPointerStackTop;
+    jitPointerStackNode.next = ggggc_blockedThreadJITPointerStacks;
+    ggggc_rootJITPointerStackList = &jitPointerStackNode;
     ggc_mutex_unlock(&ggggc_rootsLock);
 
     /* stop the world */
@@ -407,6 +413,11 @@
             }
         }
     }
+    for (jpslCur = ggggc_rootJITPointerStackList; jpslCur; jpslCur = jpslCur->next) {
+        for (jpsCur = jpslCur->cur; jpsCur < jpslCur->top; jpsCur++) {
+            TOSEARCH_ADD(jpsCur);
+        }
+    }
 
     /* add our remembered sets to the to-search list */
     for (genCur = gen + 1; genCur < GGGGC_GENERATIONS; genCur++) {
@@ -662,6 +673,8 @@
     struct GGGGC_Pool *poolCur;
     struct GGGGC_PointerStackList *pslCur;
     struct GGGGC_PointerStack *psCur;
+    struct GGGGC_JITPointerStackList *jpslCur;
+    void **jpsCur;
     struct ToSearch *toSearch;
     unsigned char genCur;
     ggc_size_t i;
@@ -676,6 +689,11 @@
             }
         }
     }
+    for (jpslCur = ggggc_rootJITPointerStackList; jpslCur; jpslCur = jpslCur->next) {
+        for (jpsCur = jpslCur->cur; jpsCur < jpslCur->top; jpsCur++) {
+            TOSEARCH_ADD(jpsCur);
+        }
+    }
 
     /* now mark */
     while (toSearch->used) {
@@ -744,6 +762,12 @@
             }
         }
     }
+    for (jpslCur = ggggc_rootJITPointerStackList; jpslCur; jpslCur = jpslCur->next) {
+        for (jpsCur = jpslCur->cur; jpsCur < jpslCur->top; jpsCur++) {
+            if (*jpsCur)
+                FOLLOW_COMPACTED_OBJECT(*jpsCur);
+        }
+    }
     for (plCur = ggggc_rootPool0List; plCur; plCur = plCur->next) {
         for (poolCur = plCur->pool; poolCur; poolCur = poolCur->next) {
             ggggc_postCompact(poolCur);
@@ -992,6 +1016,7 @@
 {
     struct GGGGC_PoolList pool0Node;
     struct GGGGC_PointerStackList pointerStackNode;
+    struct GGGGC_JITPointerStackList jitPointerStackNode;
 
     if (ggggc_stopTheWorld) {
         /* wait for the barrier once to stop the world */
@@ -1005,6 +1030,10 @@
         pointerStackNode.pointerStack = ggggc_pointerStack;
         pointerStackNode.next = ggggc_rootPointerStackList;
         ggggc_rootPointerStackList = &pointerStackNode;
+        jitPointerStackNode.cur = ggc_jitPointerStack;
+        jitPointerStackNode.top = ggc_jitPointerStackTop;
+        jitPointerStackNode.next = ggggc_rootJITPointerStackList;
+        ggggc_rootJITPointerStackList = &jitPointerStackNode;
         ggc_mutex_unlock(&ggggc_rootsLock);
 
         /* wait for the barrier once to allow collection */
diff -r 661e1d4994e8 ggggc-internals.h
--- a/ggggc-internals.h	Thu Nov 26 23:03:19 2015 -0500
+++ b/ggggc-internals.h	Thu Nov 26 23:06:11 2015 -0500
@@ -73,10 +73,16 @@
     struct GGGGC_PointerStack *pointerStack;
 };
 extern struct GGGGC_PointerStackList *ggggc_rootPointerStackList;
+struct GGGGC_JITPointerStackList {
+    struct GGGGC_JITPointerStackList *next;
+    void **cur, **top;
+};
+extern struct GGGGC_JITPointerStackList *ggggc_rootJITPointerStackList;
 
 /* threads which are blocked need to store their roots and pools aside when they can't stop the world */
 extern struct GGGGC_PoolList *ggggc_blockedThreadPool0s;
 extern struct GGGGC_PointerStackList *ggggc_blockedThreadPointerStacks;
+extern struct GGGGC_JITPointerStackList *ggggc_blockedThreadJITPointerStacks;
 
 /* the generation 0 pools are thread-local */
 extern ggc_thread_local struct GGGGC_Pool *ggggc_gen0;
diff -r 661e1d4994e8 ggggc/collections/map.h
--- a/ggggc/collections/map.h	Thu Nov 26 23:03:19 2015 -0500
+++ b/ggggc/collections/map.h	Thu Nov 26 23:06:11 2015 -0500
@@ -19,6 +19,8 @@
 #ifndef GGGGC_COLLECTIONS_MAP_H
 #define GGGGC_COLLECTIONS_MAP_H 1
 
+#include <string.h>
+
 #include "../gc.h"
 
 /* generic map type */
diff -r 661e1d4994e8 ggggc/gc.h
--- a/ggggc/gc.h	Thu Nov 26 23:03:19 2015 -0500
+++ b/ggggc/gc.h	Thu Nov 26 23:06:11 2015 -0500
@@ -296,6 +296,9 @@
 /* each thread has its own pointer stack, including global references */
 extern ggc_thread_local struct GGGGC_PointerStack *ggggc_pointerStack, *ggggc_pointerStackGlobals;
 
+/* [jitpstack] and a pointer stack for JIT purposes */
+extern ggc_thread_local void **ggc_jitPointerStack, **ggc_jitPointerStackTop;
+
 /* macros to push and pop pointers from the pointer stack */
 #define GGGGC_POP() do { \
     ggggc_pointerStack = ggggc_pointerStack->next; \
diff -r 661e1d4994e8 globals.c
--- a/globals.c	Thu Nov 26 23:03:19 2015 -0500
+++ b/globals.c	Thu Nov 26 23:06:11 2015 -0500
@@ -2,6 +2,7 @@
 
 /* publics */
 ggc_thread_local struct GGGGC_PointerStack *ggggc_pointerStack, *ggggc_pointerStackGlobals;
+ggc_thread_local void **ggc_jitPointerStack, **ggc_jitPointerStackTop;
 
 /* internals */
 volatile int ggggc_stopTheWorld;
@@ -11,8 +12,10 @@
 ggc_mutex_t ggggc_rootsLock = GGC_MUTEX_INITIALIZER;
 struct GGGGC_PoolList *ggggc_rootPool0List;
 struct GGGGC_PointerStackList *ggggc_rootPointerStackList;
+struct GGGGC_JITPointerStackList *ggggc_rootJITPointerStackList;
 struct GGGGC_PoolList *ggggc_blockedThreadPool0s;
 struct GGGGC_PointerStackList *ggggc_blockedThreadPointerStacks;
+struct GGGGC_JITPointerStackList *ggggc_blockedThreadJITPointerStacks;
 ggc_thread_local struct GGGGC_Pool *ggggc_gen0;
 ggc_thread_local struct GGGGC_Pool *ggggc_pool0;
 struct GGGGC_Pool *ggggc_gens[GGGGC_GENERATIONS];
