# HG changeset patch
# Parent 661e1d4994e8b484711694e184a2e6985bb1348b
Support for tagging in the sub-alignment bits of pointers.

diff -r 661e1d4994e8 collector-gembc.c
--- a/collector-gembc.c	Thu Nov 26 23:03:19 2015 -0500
+++ b/collector-gembc.c	Thu Nov 26 23:06:49 2015 -0500
@@ -208,6 +208,12 @@
     d = (struct GGGGC_Descriptor *) dobj; \
 } while(0)
 
+/* check if a value is user-tagged. It's done here, while adding to the
+ * to-check list, instead of while removing from the to-check list, because the
+ * descriptor may be tagged by the GC, and we can only distinguish the
+ * descriptor from other pointers at this point. */
+#define IS_TAGGED(p) ((ggc_size_t) (p) & (sizeof(ggc_size_t)-1))
+
 /* macro to add an object's pointers to the tosearch list */
 #define ADD_OBJECT_POINTERS(obj, descriptor) do { \
     void **objVp = (void **) (obj); \
@@ -220,6 +226,7 @@
                 curDescription = descriptor->pointers[++curDescriptorWord]; \
             if (curDescription & 1) \
                 /* it's a pointer */ \
+                if (objVp[curWord] && !IS_TAGGED(objVp[curWord])) \
                 TOSEARCH_ADD(&objVp[curWord]); \
             curDescription >>= 1; \
         } \
@@ -403,6 +410,7 @@
     for (pslCur = ggggc_rootPointerStackList; pslCur; pslCur = pslCur->next) {
         for (psCur = pslCur->pointerStack; psCur; psCur = psCur->next) {
             for (i = 0; i < psCur->size; i++) {
+                if (psCur->pointers[i] && !IS_TAGGED(*(void **) psCur->pointers[i]))
                 TOSEARCH_ADD(psCur->pointers[i]);
             }
         }
@@ -672,6 +680,7 @@
     for (pslCur = ggggc_rootPointerStackList; pslCur; pslCur = pslCur->next) {
         for (psCur = pslCur->pointerStack; psCur; psCur = psCur->next) {
             for (i = 0; i < psCur->size; i++) {
+                if (psCur->pointers[i] && !IS_TAGGED(*(void **) psCur->pointers[i]))
                 TOSEARCH_ADD(psCur->pointers[i]);
             }
         }
