#!/usr/bin/env python
import sys
import re

import clang.cindex
from clang.cindex import CursorKind

args = ["-DGGGGC_GGGGCIFY=1"] + sys.argv

# A general class for replacements in our code
class Replacement:
    def __init__(self, start, end, repl):
        self.start = start
        self.end = end
        self.repl = repl

    def __repr__(self):
        return "Replacement(" + \
            repr(self.start) + "," + \
            repr(self.end) + "," + \
            repr(self.repl) + ")"

    def __cmp__(self, other):
        return self.start - other.start
replacements = []

def replace(ext, repl):
    replacements.append(Replacement(ext.start.offset, ext.end.offset, repl))

def replaceRange(start, end, repl):
    replacements.append(Replacement(start.offset, end.offset, repl))

# We keep our GC types in a few sets for easy access
ggcTypes = set()
ggcPArrays = set()
ggcDArrays = set()
def isGCType(type):
    return (type in ggcTypes) or (type in ggcPArrays) or (type in ggcDArrays)

# Read in the file (must be the first arg)
cfile = sys.argv[1]
with open(cfile, "r") as fh:
    cfileCt = fh.read()

index = clang.cindex.Index.create()
tu = index.parse(None, args)
diag = list(tu.diagnostics)
if len(diag) > 0:
    for d in diag:
        sys.stderr.write(str(d) + "\n")

# Now search for GGGGC types
def findGGCStructs(node):
    if node.kind == CursorKind.STRUCT_DECL:
        prefix = node.spelling[:-14]
        suffix = node.spelling[-14:]
        if suffix == "__ggggc_struct":
            # Found a type declared with GGC()
            ggcTypes.add(prefix)
        elif suffix == "__ggggc_darray":
            # Found a data array type
            ggcDArrays.add("GGC_" + prefix + "_Array")
        elif suffix == "__ggggc_parray":
            # Found a pointer array type
            ggcPArrays.add(prefix + "Array")

    for c in node.get_children():
        findGGCStructs(c)
findGGCStructs(tu.cursor)

# Replace the GGC structs where applicable
def replGGCStructs(node):
    ext = node.extent
    if ext.start.file.name == cfile and ext.end.file.name == cfile:
        if node.kind == CursorKind.STRUCT_DECL and node.is_definition():
            if node.spelling[-14:] == "__ggggc_struct":
                # OK, transform this struct
                prefix = node.spelling[:-14]
                ptrMembers = []

                # Build the struct itself
                repl = "GGC_TYPE(" + prefix + ")\n"
                for c in node.get_children():
                    if c.kind == CursorKind.FIELD_DECL:
                        # Is this a GC'd type?
                        if isGCType(c.type.spelling):
                            repl += "\tGGC_MPTR("
                            ptrMembers.append(c.spelling)
                        else:
                            repl += "\tGGC_MDATA("
                        repl += c.type.spelling + ", " + c.spelling + ");\n"
                    else:
                        print "WARNING: Unrecognized struct member ", c.kind

                # Then the descriptor
                repl += "GGC_END_TYPE(" + prefix + ","
                if len(ptrMembers) == 0:
                    repl += "GGC_NO_PTRS"
                else:
                    for member in ptrMembers:
                        repl += "\n\tGGC_PTR(" + prefix + ", " + member + ")"
                repl += ")\n"

                replace(ext, repl)

                # Generally the struct declaration will end with a ;, but GGC_END_TYPE cannot
                semiStart = ext.end.offset
                match = re.match('^[ \\t\\r\\n]*;?', cfileCt[semiStart:])
                if match:
                    semiEnd = semiStart + match.end()
                    replacements.append(Replacement(semiStart, semiEnd, ""))

    for c in node.get_children():
        replGGCStructs(c)
replGGCStructs(tu.cursor)

# Now replace accesses
def replGGCAccess(node):
    recurse = True
    ext = node.extent
    if ext.start.file.name == cfile and ext.end.file.name == cfile:
        if node.kind == CursorKind.MEMBER_REF_EXPR:
            # Found a member ref. Are we accessing a GC'd type?
            children = list(node.get_children())
            if children[0].type.spelling in ggcTypes:
                leftExt = children[0].extent

                # OK, are we accessing a GC'd type?
                accPointer = isGCType(node.type.spelling)

                # Now put it all together
                repl = "GGC_R" + ("P" if accPointer else "D") + "(" + \
                    cfileCt[leftExt.start.offset:leftExt.end.offset] + \
                    ", " + node.spelling + ")"
                replace(ext, repl)

        elif node.kind == CursorKind.BINARY_OPERATOR:
            # Right now the only way to find the operator is to lift out the appropriate token
            children = list(node.get_children())
            tok = list(node.get_tokens())[len(list(children[0].get_tokens()))-1]
            if tok.spelling == "=":
                # It's an assignment, is to to a member ref?
                if children[0].kind == CursorKind.MEMBER_REF_EXPR:
                    # Are we accessing a GC'd type?
                    c0c = list(children[0].get_children())
                    if c0c[0].type.spelling in ggcTypes:
                        # We are
                        leftExt = c0c[0].extent
                        rightExt = children[1].extent

                        # Are we accessing a GC'd type?
                        accPointer = isGCType(children[0].type.spelling)

                        # Put it all together
                        repl = "GGC_W" + ("P" if accPointer else "D") + "(" + \
                            cfileCt[leftExt.start.offset:leftExt.end.offset] + \
                            ", " + children[0].spelling + \
                            ", " + cfileCt[rightExt.start.offset:rightExt.end.offset] + ")"
                        replace(ext, repl)

                        recurse = False

    if recurse:
        for c in node.get_children():
            replGGCAccess(c)
replGGCAccess(tu.cursor)

# Now move all the declarations to the tops of functions
def moveDeclsFindFunctions(node):
    ext = node.extent
    if ext.start.file.name == cfile and ext.end.file.name == cfile and node.kind == CursorKind.FUNCTION_DECL:
        moveDeclsInFunction(node)

    else:
        for c in node.get_children():
            moveDeclsFindFunctions(c)

def moveDeclsInFunction(node):
    moveDecls = []
    gcVars = []
    moveDeclsInFunctionPrime(node, moveDecls, gcVars)

    if len(gcVars) > 0:
        # Some declarations were moved.

        # First, find the COMPOUND_STMT which is the function body
        compound_stmt = node
        for c in node.get_children():
            if c.kind == CursorKind.COMPOUND_STMT:
                compound_stmt = c
                break

        # Then the first statement within it
        first_stmt = compound_stmt.get_children().next()

        # Add the declarations there
        repl = ""
        for decl in moveDecls:
            dext = decl.extent
            repl += "\t" + cfileCt[dext.start.offset:dext.end.offset] + "\n"

        # Nullify all declared variables
        for decl in moveDecls:
            for vdecl in decl.get_children():
                repl += "\t" + vdecl.spelling + " = NULL;\n"

        # And the GGC_PUSH statement
        repl += "\tGGC_PUSH_" + str(len(gcVars)) + "(" + ((",").join(gcVars)) + ");\n"

        # Replace it
        ext = first_stmt.extent
        replaceRange(ext.start, ext.start, repl)

def moveDeclsInFunctionPrime(node, moveDecls, gcVars):
    ext = node.extent

    if node.kind == CursorKind.DECL_STMT:
        gcType = ""
        someGCd = False
        allGCd = True

        # See if the declared variables are all GC'd
        for c in node.get_children():
            if c.kind == CursorKind.VAR_DECL and isGCType(c.type.spelling):
                someGCd = True
                gcType = c.type.spelling

                # Make sure it doesn't have an initializer
                c2 = list(c.get_children())
                if len(c2) > 1:
                    print 'Bad declaration at ' + str(ext.start) + ': No initializers for GC types'
                    sys.exit(1)
            else:
                allGCd = False

        if someGCd and not allGCd:
            # Bad decl
            print 'Bad declaration at ' + str(ext.start) + ': Must have all GC types'
            sys.exit(1)

        if someGCd:
            # Declaring GC'd types, so move the declarations
            moveDecls.append(node)
            for c in node.get_children():
                gcVars.append(c.spelling)
            replace(ext, "")

    else:
        if node.kind == CursorKind.PARM_DECL:
            # Parameters can also be GC'd
            if isGCType(node.type.spelling):
                gcVars.append(node.spelling)

        for c in node.get_children():
            moveDeclsInFunctionPrime(c, moveDecls, gcVars)

moveDeclsFindFunctions(tu.cursor)


#def testPrint(node, spcs):
#    ext = node.extent
#    if ext.start.file.name == cfile and ext.end.file.name == cfile:
#        print spcs, node.kind
#        print spcs, cfileCt[ext.start.offset:ext.end.offset].replace("\n", " ")
#
#    for c in node.get_children():
#        testPrint(c, spcs+"  ")
#testPrint(tu.cursor, "")


# Now apply all the replacements
replacements.sort(reverse=True)
for replacement in replacements:
    cfileCt = cfileCt[:replacement.start] + replacement.repl + cfileCt[replacement.end:]

# And print out the generated file
sys.stdout.write(cfileCt)
